{"version":3,"sources":["Visualizer/Grid/Grid.module.css","logo.svg","Visualizer/algorithms/GRAPH_CONSTANTS.js","Visualizer/Toolbar/Toolbar.js","Visualizer/NavigationBar/NavigationBar.js","Visualizer/Legend/Legend.js","Visualizer/algorithms/bfs.js","Visualizer/algorithms/Utility/utility.js","Visualizer/algorithms/dijkstraSearch.js","Visualizer/algorithms/Utility/PriorityQueue.js","Visualizer/algorithms/bestFirstSearch.js","Visualizer/algorithms/bestFirstSearchWeighted.js","Visualizer/algorithms/recursiveDivisionMaze.js","Visualizer/algorithms/recursiveMaze.js","Visualizer/algorithms/dfsMaze.js","Visualizer/algorithms/randomObstructionMaze.js","Visualizer/Grid/Helper.js","Visualizer/Grid/Grid.js","Visualizer/algorithms/dfs.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAX_ROW","MAX_COLUMN","MAZE","SEARCH_SPEED","Toolbar","state","currentAlgorithm","currentAlgorithmKey","currentMaze","currentMazeKey","setStart","startX","document","getElementById","startY","value","alert","props","setEnd","endX","endY","key","this","setState","algorithms","algorithmHandler","mazes","mazeHandler","className","data-toggle","target","href","type","aria-haspopup","aria-expanded","disabled","disableAll","map","algorithm","index","style","color","onClick","bind","visualize","clear","role","aria-label","id","aria-labelledby","maze","mazeSelectorHandler","placeholder","min","max","width","height","htmlFor","toggleWeights","Component","NavigationBar","breadthFirstSearch","src","board","dst","currentCell","hashKey","queue","visualQueue","previous","r","c","push","length","shift","a","i","j","node","path","grid","row","getGrid","dijkstraSearch","weightsBoard","pathWeight","result","neighbour","pq","PriorityQueue","b","isEmpty","pop","console","log","Infinity","parent","left","right","comparator","_heap","_comparator","size","values","forEach","_siftUp","poppedValue","peek","bottom","_swap","_siftDown","replacedValue","_greater","maxChild","bestFirstSearch","heuristics","z","bestFirstSearchWeighted","heuristic","recursiveDivisonMaze","visited","generateVisited","minI","minJ","maxI","maxJ","mid","x","addToQueue","y","currentNode","stack","createVertical","Math","floor","randomNumber","createHorizontal","dfs","hole","random","recursiveMaze","p","q","generateMaze","dfsMaze","steps","visit","splice","isValid","vi","vj","indexI","indexJ","maxR","maxC","randomObstructionMaze","createBoard","cells","createWeightBoard","weightBoard","Grid","populateDS","cellsLoaded","setters","start","settter","setSrc","end","setter","setDst","tdClickHandler","cellState","prevState","Object","assign","cssClasses","obstruction","unvisited","clearBoardHandler","visualizeSelectedAlgorithmHandler","algorithmFunctions","selectAlgorithmHandler","selectMazeHandler","mazeFunctions","leaveObstruction","updateCellState","cssClass","getRecursiveMaze","newBoard","inter","setInterval","clearInterval","getRandomObstructionMaze","getRecursiveDivisionMaze","getDFSMaze","bfs","JSON","parse","stringify","depthFirstSearch","weightsSet","createWeights","destroyWeights","dijstra","weights","createEmptyWeightBoard","aStar","abs","greedyBFS","swarm","title","nextProps","align","rIndex","cell","cIndex","onMouseDownCapture","onDrag","aria-hidden","Visualizer","currentAlgrithmKey","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29aa3d2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"obstruction\":\"Grid_obstruction__2oVQL\",\"obstructionAnimation\":\"Grid_obstructionAnimation__qzhv0\",\"visited\":\"Grid_visited__1zvsx\",\"visitedAnimation\":\"Grid_visitedAnimation__2J4kw\",\"path\":\"Grid_path__H0pKA\",\"pathAnimation\":\"Grid_pathAnimation__2cmei\",\"unvisited\":\"Grid_unvisited__2u5uh\"};","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","const UNVISITED=0;\nconst VISITED=1;\nconst OBSTRUCTION=2\nconst VISITING=3;\nconst PATH=4\nconst SRC_VISITED=5;\nconst DST_VISITED=6;\n// const MAX_ROW=20;\n// const MAX_COLUMN=50;\nconst MAX_ROW=21;\nconst MAX_COLUMN=55;\nconst startX=10;\nconst startY=10;\nconst endX=40;\nconst endY=10;\nconst MAZE={\n    x:10,\n    y:26\n};\nconst MAZE_SPEED=50;\nconst SEARCH_SPEED=100;\nexport { UNVISITED, VISITED, VISITING,OBSTRUCTION,MAX_COLUMN,MAX_ROW,PATH,startX,startY,endX,endY,MAZE,SEARCH_SPEED,MAZE_SPEED,SRC_VISITED,DST_VISITED}","import React, {Component} from 'react';\nimport {startX,startY,endX,endY, MAX_ROW,MAX_COLUMN} from '../algorithms/GRAPH_CONSTANTS'\nexport default class Toolbar extends Component{\n    state={\n        currentAlgorithm:'',\n        currentAlgorithmKey:-1,\n        currentMaze:'',\n        currentMazeKey:-1\n    }\n    componentDidMount(){\n      document.getElementById('startX').value=startX;\n      document.getElementById('startY').value=startY;\n      document.getElementById('endX').value=endX;\n      document.getElementById('endY').value=endY;\n\n    }\n\n    algorithmSelectorHandler(key)\n    {\n        this.setState({\n            currentAlgorithm:this.props.algorithms[key],\n            currentAlgorithmKey:key    \n        })\n        this.props.algorithmHandler(key);\n    }\n    mazeSelectorHandler(key)\n    {\n        this.setState({\n            ...this.state,\n            currentMaze:this.props.mazes[key],\n            currentMazeKey:key\n        })\n        this.props.mazeHandler(key);\n    }\n    setStart=()=>{\n      let startX=document.getElementById('startX');\n      let startY=document.getElementById('startY');\n      if(startX.value=='' || startY.value==''){\n        alert('Please enter a valid x/y coordinate');\n        return;\n      }\n      if(startX.value<0 || startX.value>=MAX_COLUMN || startY.value<0 || startY.value>=MAX_ROW){\n        alert('index out of bounds. Please put a valid index');\n        return;\n      }\n      this.props.setStart(startY.value,startX.value);\n    }\n    setEnd=()=>{\n      let endX=document.getElementById('endX');\n      let endY=document.getElementById('endY');\n      if(endX.value=='' || endY.value==''){\n        alert('Please enter a valid x/y coordinate');\n        return;\n      }\n      if(endX.value<0 || endX.value>=MAX_COLUMN || endY.value<0 || endY.value>=MAX_ROW){\n        alert('index out of bounds. Please put a valid index');\n        return;\n      }\n      this.props.setEnd(endY.value,endX.value);\n    }\n    render()\n    {\n      let setters=[{placeholder:'start',onClick:this.setStart},{placeholder:'end',onClick:this.setEnd}]\n      return (\n          <div>\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n            {/* <button type=\"button\" className=\"btn btn-secondary btn-lg\" data-toggle=\"modal\" data-target=\"#modalPush\" disabled={this.props.disableAll}>set start/end</button> */}\n            <a className='btn btn-secondary' target='_blank' href='https://drive.google.com/file/d/1avn73yjHzetjgDQTDOhitJUp_RASIPLI/view?usp=sharing'><b>Help</b></a>\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n              <button className=\"btn btn-primary dropdown-toggle mr-4 btn-lg\" type=\"button\" data-toggle=\"dropdown\"\n              aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.props.disableAll}>Algorithm: {this.props.currentAlgorithm}</button>\n\n            <div className=\"dropdown-menu\">\n              {this.props.algorithms.map((algorithm,index)=>{\n                return (\n                  <a className=\"dropdown-item\" key={algorithm+'-'+index} style={{color: index%2==0?'blue':'green'}} onClick={this.props.algorithmHandler.bind(this,index)}>{algorithm}</a>\n                      \n                )\n              })}\n              </div>\n\n\n\n              <button type=\"button\" className=\"btn btn-success btn-lg\" onClick={this.props.visualize} disabled={this.props.disableAll}>Visualize</button>\n\n            </div>\n\n            <button type=\"button\" className=\"btn bt-lg\" onClick={this.props.clear.bind(this,false)} disabled={this.props.disableAll}>clear</button>\n\n            </div>\n\n\n\n\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Button group with nested dropdown\">\n          <div className=\"btn-group\" role=\"group\">\n            <button id=\"btnGroupDrop1\" type=\"button\" className=\"btn btn-info dropdown-toggle btn-lg\" data-toggle=\"dropdown\"\n              aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.props.disableAll}>\n              Maze algorithms\n            </button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\n            { this.props.mazes.map((maze,index)=>{return  (<a className=\"dropdown-item\" style={{color: index%2==0?'blue':'green'}} key={maze} onClick={this.mazeSelectorHandler.bind(this,index)}>{maze}</a>)})  }\n            </div>\n\n          </div>\n        </div>\n\n\n\n\n\n<br />\n<br />\n<div className='flex-center'>\n            <form>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <input placeholder=\"x\" type=\"number\" id=\"startX\" min=\"1\" max=\"999\" style={{width:'50px',height:'50px'}} className=\"form-control\" />\n                  <label htmlFor=\"startX\">Start X</label>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <input placeholder=\"y\" type=\"number\" id=\"startY\" style={{width:'50px',height:'50px'}} className=\"form-control\" disabled={this.props.disableAll} />\n                  <label htmlFor=\"startY\">Start Y</label>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <button className='btn' type='button' onClick={this.setStart} disabled={this.props.disableAll}>set</button>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <input placeholder=\"x\" type=\"number\" id=\"endX\" style={{width:'50px',height:'50px'}} className=\"form-control\" />\n                  <label htmlFor=\"endX\">End X</label>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <input placeholder=\"y\" type=\"number\" id=\"endY\" style={{width:'50px',height:'50px'}} className=\"form-control\" />\n                  <label htmlFor=\"endY\">End Y</label>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <button className='btn' type=\"button\" onClick={this.setEnd} disabled={this.props.disableAll}>set</button>\n            </div>\n          </div>\n\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            </div>\n          </div>\n\n\n          <div className=\"col\">\n            <div className=\"md-form mt-0\">\n            <div className=\"custom-control custom-switch\">\n        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitches\" onClick={this.props.toggleWeights} />\n        <label className=\"custom-control-label\" htmlFor=\"customSwitches\">Weight</label>\n      </div>\n\n            </div>\n          </div>\n\n\n\n          </div>\n\n\n\n      </form>\n      </div>\n\n\n\n\n\n          </div>\n        );\n    }\n}","import React, {Component} from 'react';\n\nexport default class NavigationBar extends Component{\n    state={\n        currentAlgorithm:'',\n        currentAlgorithmKey:-1,\n        currentMaze:'',\n        currentMazeKey:-1\n    }\n    algorithmSelectorHandler(key)\n    {\n        this.setState({\n            currentAlgorithm:this.props.algorithms[key],\n            currentAlgorithmKey:key    \n        })\n        this.props.algorithmHandler(key);\n    }\n    mazeSelectorHandler(key)\n    {\n        this.setState({\n            ...this.state,\n            currentMaze:this.props.mazes[key],\n            currentMazeKey:key\n        })\n        this.props.mazeHandler(key);\n    }\n    render()\n    {\n        let background_color='primary-color';\n        return (\n<nav className={\"navbar justify-content-center navbar-expand-lg navbar-dark \"+background_color} style={{}}>\n\n  <a className=\"navbar-brand\" href=\"#\"><h1><b><i className=\"fas fa-route\" style={{color:'green'}}></i> Path-Finder</b></h1></a>\n\n</nav>\n            );\n    }\n}","import React, { Component } from 'react';\n\nclass Legend extends Component{\n    render()\n    {\n        return (\n            <div>\n                --\n        </div>        \n        );\n\n    }\n}\nexport default Legend;","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\nexport function breadthFirstSearch(src,board,dst)\n{\n    // console.log('src',src);\n    // console.log('dst',dst);\n    // console.log('board',board);\n    let currentCell,i,j,hashKey;\n    let queue=[];\n    let visualQueue=[];\n    let previous={};\n    let result=[];\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\n    let c=[0,-1,0,1];\n    // console.log('src:',src);\n    // console.log('dst:',dst);\n    // console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n    queue.push(src);\n    while(queue.length!=0)\n    {\n        currentCell=queue.shift();\n        if(currentCell.state===VISITED) continue;\n        if(currentCell.key===dst.key)\n        {\n            visualQueue.push(currentCell.key);\n            currentCell.state=VISITED;\n            break;\n        }\n        currentCell.state=VISITED;\n        //currentCell.className=cssClasses.visited;\n        visualQueue.push(currentCell.key);\n        for(let a=0;a<r.length;a++) //or c.length\n        {\n            i=currentCell.i+r[a];\n            j=currentCell.j+c[a];\n            hashKey=i+'-'+j;\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\n            {\n                queue.push(board[hashKey]);\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\n            }\n        }\n    }\n    let node=dst.key;\n    let path=[];\n    while(1)\n    {\n        if(node)\n        {\n            path.push(node);\n            board[node].state=PATH;\n            node=previous[node];\n            // console.log(node);\n            if(node===src.key)\n            {\n                path.push(node);\n                board[node].state=PATH;\n                break;\n            }\n        }\n        else break;\n    }\n    let grid=getGrid(board);\n    result=[visualQueue,path,grid];\n    // console.log('path',path);\n    // console.log('visualQueue',visualQueue);\n    return result;\n}\nfunction getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from '../GRAPH_CONSTANTS';\nexport function getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}\n//export default getGrid;","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\n//import { PriorityQueue } from './Utility/PriorityQueue';\nimport { getGrid } from './Utility/utility';\nexport function dijkstraSearch(src,board,dst,weightsBoard)\n{\nconst pq=new PriorityQueue((a,b)=>{return a[0]<b[0]});\n// console.log('src',src);\n// console.log('dst',dst);\n// console.log('board',board);\nlet currentCell,i,j,hashKey,pathWeight,weight;\nlet visualQueue=[];\nlet previous={};\nlet next={};\nlet result=[];\nlet weights={};\nlet visited={};\n\nlet grid=getGrid(board);\n\nlet neighbour;\nlet r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\nlet c=[0,-1,0,1];\n// console.log('src:',src);\n// console.log('dst:',dst);\n// console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\npq.push([0,src]);\n\n\nwhile(!pq.isEmpty())\n{\n    currentCell=pq.pop();\n    //visited[currentCell.i+'-'+currentCell.j]\n    if(currentCell[1].state==VISITED) continue;\n    currentCell[1].state=VISITED;\n    visualQueue.push(currentCell[1].key);\n    //weights[currentCell.i+'-'+currentCell.j]=currentCell;\n    if(currentCell[1].key==dst.key) break;\n    for(let a=0;a<r.length;a++){ // or c.length\n        i=currentCell[1].i+r[a];\n        j=currentCell[1].j+c[a];\n        //console.log('grid error',currentCell[1].i+r[a]);\n        if(i<0 || i>=MAX_ROW || j<0 || j>=MAX_COLUMN) continue;\n        neighbour=grid[currentCell[1].i+r[a]][currentCell[1].j+c[a]];\n        if(!neighbour)\n        {\n          console.log('error:',currentCell[1].i+r[a],currentCell[1].j+c[a]);\n          //continue;\n        }\n        if(neighbour.state==VISITED || neighbour.state==OBSTRUCTION) continue;\n        pathWeight=currentCell[0]+weightsBoard[neighbour.i][neighbour.j]\n        pq.push([pathWeight,neighbour]);\n        weight=previous[neighbour.key]?previous[neighbour.key][0]:Infinity;\n        if(weight>pathWeight) previous[neighbour.key]=[pathWeight,currentCell[1].key];\n    }\n\n}\n\nconsole.log(previous);\n\nlet node=dst.key;\nlet path=[];\nwhile(1)\n{\n    if(node)\n    {\n        path.push(node);\n        board[node].state=PATH;\n        if(!previous[node]) break;\n        node=previous[node][1];\n        console.log(node);\n        if(node===src.key)\n        {\n            path.push(node);\n            board[node].state=PATH;\n            break;\n        }\n    }\n    else break;\n}\n\n\n\nresult=[visualQueue,path,grid];\nconsole.log('path',path);\nconsole.log('visualQueue',visualQueue);\nreturn result;\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst top = 0;\nconst parent = i => ((i + 1) >>> 1) - 1;\nconst left = i => (i << 1) + 1;\nconst right = i => (i + 1) << 1;\n\nexport default class PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n  size() {\n    return this._heap.length;\n  }\n  isEmpty() {\n    return this.size() == 0;\n  }\n  peek() {\n    return this._heap[top];\n  }\n  push(...values) {\n    values.forEach(value => {\n      this._heap.push(value);\n      this._siftUp();\n    });\n    return this.size();\n  }\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - 1;\n    if (bottom > top) {\n      this._swap(top, bottom);\n    }\n    this._heap.pop();\n    this._siftDown();\n    return poppedValue;\n  }\n  replace(value) {\n    const replacedValue = this.peek();\n    this._heap[top] = value;\n    this._siftDown();\n    return replacedValue;\n  }\n  _greater(i, j) {\n    return this._comparator(this._heap[i], this._heap[j]);\n  }\n  _swap(i, j) {\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n  }\n  _siftUp() {\n    let node = this.size() - 1;\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n      node = parent(node);\n    }\n  }\n  _siftDown() {\n    let node = top;\n    while (\n      (left(node) < this.size() && this._greater(left(node), node)) ||\n      (right(node) < this.size() && this._greater(right(node), node))\n    ) {\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\n      this._swap(node, maxChild);\n      node = maxChild;\n    }\n  }\n}","const top = 0;\nconst parent = i => ((i + 1) >>> 1) - 1;\nconst left = i => (i << 1) + 1;\nconst right = i => (i + 1) << 1;\n\nexport default class PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n  size() {\n    return this._heap.length;\n  }\n  isEmpty() {\n    return this.size() == 0;\n  }\n  peek() {\n    return this._heap[top];\n  }\n  push(...values) {\n    values.forEach(value => {\n      this._heap.push(value);\n      this._siftUp();\n    });\n    return this.size();\n  }\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - 1;\n    if (bottom > top) {\n      this._swap(top, bottom);\n    }\n    this._heap.pop();\n    this._siftDown();\n    return poppedValue;\n  }\n  replace(value) {\n    const replacedValue = this.peek();\n    this._heap[top] = value;\n    this._siftDown();\n    return replacedValue;\n  }\n  _greater(i, j) {\n    return this._comparator(this._heap[i], this._heap[j]);\n  }\n  _swap(i, j) {\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n  }\n  _siftUp() {\n    let node = this.size() - 1;\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n      node = parent(node);\n    }\n  }\n  _siftDown() {\n    let node = top;\n    while (\n      (left(node) < this.size() && this._greater(left(node), node)) ||\n      (right(node) < this.size() && this._greater(right(node), node))\n    ) {\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\n      this._swap(node, maxChild);\n      node = maxChild;\n    }\n  }\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\nimport PriorityQueue from './Utility/PriorityQueue';\nexport function bestFirstSearch(src,board,dst,heuristics)\n{\n    // console.log('src',src);\n    // console.log('dst',dst);\n    // console.log('board',board);\n    let z,currentCell,i,j,hashKey;\n    let queue=new PriorityQueue((a,b)=>{return a[0]<b[0];});\n    let visualQueue=[];\n    let previous={};\n    let result=[];\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\n    let c=[0,-1,0,1];\n    // console.log('src:',src);\n    // console.log('dst:',dst);\n    // console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n    queue.push([heuristics[src.i][src.j],src]);\n    while(!queue.isEmpty())\n    {\n        z=queue.pop();\n        // if(!z)\n        // {\n        //     console.log(queue.length())\n        //     continue;\n        // }\n        console.log(z);\n        currentCell=z[1];\n        if(currentCell.state===VISITED) continue;\n        if(currentCell.key===dst.key)\n        {\n            visualQueue.push(currentCell.key);\n            currentCell.state=VISITED;\n            break;\n        }\n        currentCell.state=VISITED;\n        //currentCell.className=cssClasses.visited;\n        visualQueue.push(currentCell.key);\n        for(let a=0;a<r.length;a++) //or c.length\n        {\n            i=currentCell.i+r[a];\n            j=currentCell.j+c[a];\n            hashKey=i+'-'+j;\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\n            {\n                // console.log('null path error:','previous:'+i+'-'+j,'current:'+hashKey,'cell:'+board[hashKey],'weight'+heuristics[i][j]);\n                queue.push([heuristics[i][j],board[hashKey]]);\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\n            }\n        }\n    }\n    let node=dst.key;\n    let path=[];\n    while(1)\n    {\n        if(node)\n        {\n            path.push(node);\n            board[node].state=PATH;\n            if(!previous[node]) break;\n            node=previous[node];\n            // console.log(node);\n            if(node===src.key)\n            {\n                path.push(node);\n                board[node].state=PATH;\n                break;\n            }\n        }\n        else break;\n    }\n    let grid=getGrid(board);\n    result=[visualQueue,path,grid];\n    // console.log('path',path);\n    // console.log('visualQueue',visualQueue);\n    return result;\n}\nfunction getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\nimport PriorityQueue from './Utility/PriorityQueue';\nimport { getGrid } from './Utility/utility';\nexport function bestFirstSearchWeighted(src,board,dst,weightsBoard,heuristic)\n{\nconst pq=new PriorityQueue((a,b)=>{return a[0]<b[0]});\nconsole.log('src',src);\nconsole.log('dst',dst);\nconsole.log('board',board);\nlet currentCell,i,j,hashKey,pathWeight,weight;\nlet visualQueue=[];\nlet previous={};\nlet next={};\nlet result=[];\nlet weights={};\nlet visited={};\n\nlet grid=getGrid(board);\n\nlet neighbour;\nlet r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\nlet c=[0,-1,0,1];\nconsole.log('src:',src);\nconsole.log('dst:',dst);\nconsole.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\npq.push([weightsBoard[src.i][src.j]+heuristic[src.i][src.j],src,heuristic[src.i][src.j]]);\n\n\nwhile(!pq.isEmpty())\n{\n    currentCell=pq.pop();\n    //visited[currentCell.i+'-'+currentCell.j]\n    if(currentCell[1].state==VISITED) continue;\n    currentCell[1].state=VISITED;\n    visualQueue.push(currentCell[1].key);\n    //weights[currentCell.i+'-'+currentCell.j]=currentCell;\n    if(currentCell[1].key==dst.key) break;\n    for(let a=0;a<r.length;a++){ // or c.length\n        i=currentCell[1].i+r[a];\n        j=currentCell[1].j+c[a];\n        //console.log('grid error',currentCell[1].i+r[a]);\n        if(i<0 || i>=MAX_ROW || j<0 || j>=MAX_COLUMN) continue;\n        neighbour=grid[currentCell[1].i+r[a]][currentCell[1].j+c[a]];\n        if(neighbour.state==VISITED || neighbour.state==OBSTRUCTION) continue;\n        pathWeight=currentCell[2]+weightsBoard[neighbour.i][neighbour.j]\n        pq.push([pathWeight+heuristic[neighbour.i][neighbour.j],neighbour,pathWeight]);\n        weight=previous[neighbour.key]?previous[neighbour.key][0]:Infinity;\n        if(weight>pathWeight) previous[neighbour.key]=[pathWeight,currentCell[1].key];\n    }\n\n}\n\nconsole.log(previous);\n\nlet node=dst.key;\nlet path=[];\nwhile(1)\n{\n    if(node)\n    {\n        path.push(node);\n        board[node].state=PATH;\n        if(!previous[node]) break;\n        node=previous[node][1];\n        console.log(node);\n        if(node===src.key)\n        {\n            path.push(node);\n            board[node].state=PATH;\n            break;\n        }\n    }\n    else break;\n}\n\n\n\nresult=[visualQueue,path,grid];\nconsole.log('path',path);\nconsole.log('visualQueue',visualQueue);\nreturn result;\n}","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW, MAZE } from './GRAPH_CONSTANTS';\nexport function recursiveDivisonMaze(board,src,dst)\n{\nlet grid=getGrid(board);\nlet visited=generateVisited();\nlet visualQueue;\n//visited[src.i][src.j]=true;\n//visited[dst.i][dst.j]=true;\n\nvisualQueue=dfs(board,MAZE.x,MAZE.y,visited,src,dst);\nlet result=[board,visualQueue,grid];\nreturn result;\n}\nfunction dfs(board,i,j,visited,src,dst)\n{\n    let visualQueue=[];\n    for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue,src,dst);\n    for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue,src,dst);\n    for(var x=MAX_ROW-1;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue,src,dst);\n    for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue,src,dst);    \n    let minI,minJ,maxI,maxJ,mid,mid1,mid2,opening;\n    minJ=minI=2;\n    maxI=MAX_ROW-2-1;\n    maxJ=MAX_COLUMN-2-1;\n    let stack=[];\n    stack.push([minI,minJ,maxI,maxJ,true]);\n    //addToQueue(i,j,board,visualQueue,src,dst)\n    visited[i][j]=true;\n    let currentNode,counter;\n    counter=0;\n    while(stack.length!=0)\n    {\n        //if(counter==10) break; \n        //counter++;\n        if(stack.length==100) break;\n        currentNode=stack.pop();\n        minI=currentNode[0];\n        minJ=currentNode[1];\n        maxI=currentNode[2];\n        maxJ=currentNode[3];\n        console.log('currentNode:',currentNode);\n        if(currentNode[4]){\n            if(maxI-minI<2) continue;\n            mid=Math.floor(randomNumber(minJ, maxJ)/2)*2;\n            createVertical(minI,maxI,mid,board,visualQueue,src,dst);\n            stack.push([minI,minJ,maxI,mid-1,!currentNode[4]]);\n            stack.push([minI,mid+1,maxI,maxJ,!currentNode[4]]);\n        }\n        else{\n            if(maxJ-minJ<2) continue;\n            mid=Math.floor(randomNumber(minI,maxI)/2)*2;\n            createHorizontal(minJ,maxJ,mid,board,visualQueue,src,dst);\n            stack.push([minI,minJ,mid-1,maxJ,!currentNode[4]]);\n            stack.push([mid+1,minJ,maxI,maxJ,!currentNode[4]]);\n        }\n    \n    }\n    return visualQueue;\n}\nfunction createHorizontal(minJ,maxJ,mid,board,visualQueue,src,dst)\n{\n    let hole=Math.floor(randomNumber(minJ,maxJ)/2)*2+1;\n    for(var x=minJ;x<=maxJ;x++){\n        if(x==hole) continue;\n        else addToQueue(mid,x,board,visualQueue,src,dst);\n    }\n}\nfunction createVertical(minI,maxI,mid,board,visualQueue,src,dst){\n    let hole=Math.floor(randomNumber(minI,maxI)/2)*2+1;\n    for(var x=minI;x<=maxI;x++){\n        if(x==hole) continue;\n        else addToQueue(x,mid,board,visualQueue,src,dst);\n    }\n}\n\n\nfunction addToQueue(i,j,board,visualQueue,src,dst)\n{\nif((i==src.i && j==src.j) || (i==dst.i && j==dst.j)) return;\nlet key=i+'-'+j;\n//console.log(key);\nif(!board[key]){\n    console.log('2222222222222222      '+key);\n    return;\n}\nboard[key].state=OBSTRUCTION;\nvisualQueue.push(key);\n//board[key].className='cssClasses.obstruction';\n}\n\nfunction randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\nfunction getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}\nfunction generateVisited(){\n    let visited,row;\n    visited=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(false);\n        }\n        visited.push(row);\n    }\n    return visited;    \n}\n","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW } from './GRAPH_CONSTANTS';\nexport function recursiveMaze(board,src,dst)\n{\n    let strKey;\n    let currentCell,i,j,hashKey;\n    let queue=[];\n    let visualQueue=[];\n    // for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue);\n    // for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue);\n    // for(var x=MAX_ROW;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue);\n    // for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue);\n    for(var p=0;p<MAX_ROW;p++)\n    {\n        for(var q=0;q<MAX_COLUMN;q++)\n        {\n            if(p%2===0 && q%2===0)\n            {\n                strKey=p+'-'+q;\n                //if(src.key===strKey || dst.key===strKey) continue;\n                //board[strKey].state=OBSTRUCTION\n                //board[strKey].className='cssClasses.obstruction';\n                addToQueue(p,q,board,visualQueue,src,dst);\n            }\n        }\n    }    \n    generateMaze(board,visualQueue,src,dst);\n    let previous={};\n    let result=[];\n    let grid=getGrid(board);\n    let r=[1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\n    let c=[0,1];\n    result=[board,visualQueue,grid];\n    return result;\n}\nfunction addToQueue(i,j,board,visualQueue,src,dst)\n{\nlet key=i+'-'+j;\nif(key==src.key || key==dst.key) return;\nboard[key].state=OBSTRUCTION;\nvisualQueue.push(key);\n//board[key].className='cssClasses.obstruction';\n}\nfunction generateMaze(board,visualQueue,src,dst)\n{\nlet key,num;\nfor(var p=0;p<MAX_ROW;p++)\n{\n    for(var q=0;q<MAX_COLUMN;q++)\n    {\n        key=board[p+'-'+q];\n        if(src.key===key || dst.key===key) continue;\n        if(p%2==0 && q%2==0)\n        {\n            num=(Math.random()*10);\n            if(num>=5){\n                if(q+1<MAX_COLUMN) addToQueue(p,q+1,board,visualQueue,src,dst);\n                num=(Math.random()*10);\n                if(num>=5){\n                    if(p+1<MAX_ROW) addToQueue(p+1,q,board,visualQueue,src,dst);\n                }    \n            }\n            else\n            {\n                if(p+1<MAX_ROW) addToQueue(p+1,q,board,visualQueue,src,dst);\n            }\n        }\n    }\n}\n\n\n}\n\nfunction getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW, MAZE } from './GRAPH_CONSTANTS';\nexport function dfsMaze(board,src,dst)\n{\nlet grid=getGrid(board);\nlet visited=generateVisited();\nlet visualQueue;\n//visited[src.i][src.j]=true;\n//visited[dst.i][dst.j]=true;\nvisualQueue=dfs(board,MAZE.x,MAZE.y,visited,src,dst);\nlet result=[board,visualQueue,grid];\nreturn result;\n}\nfunction dfs(board,i,j,visited,src,dst)\n{\n    let visualQueue=[];\n    let stack=[];\n    stack.push([i,j]);\n    addToQueue(i,j,board,visualQueue,src,dst)\n    visited[i][j]=true;\n    let currentNode,steps,r,c,index,z,a,b;\n    while(stack.length!=0)\n    {\n        currentNode=stack.pop();\n        console.log('currentNode:',currentNode[0],currentNode[1]);\n        steps=[];\n        r=[-1,0,1,0];\n        c=[0,-1,0,1];\n        for(let x=0;x<r.length;x++) steps.push([r[x],c[x]]);\n        visit(board,currentNode[0],currentNode[1],steps,visualQueue,visited,src,dst);\n        index=0;\n        z=4;\n        console.log('traversing');\n        while(r.length>0)\n        {\n            index=(Math.floor(Math.random()*10))%z;\n            a=currentNode[0]+r[index]*2;\n            b=currentNode[1]+c[index]*2;\n            r.splice(index,1);\n            c.splice(index,1);\n            z--;\n            if(isValid(a,b,MAX_ROW,MAX_COLUMN) && visited[a][b]===false)\n            {\n                visited[a][b]=true;\n                stack.push([a,b]);\n            }\n        }\n    \n    }\n    return visualQueue;\n}\nfunction visit(board,i,j,steps,visualQueue,visited,src,dst){\n    let vi,vj,indexI,indexJ;\n    for(var q=0;q<steps.length;q++)\n    {\n\t\tindexI = i+steps[q][0];\n\t\tindexJ = j+steps[q][1];\n\t\tvi = i+steps[q][0]*2;\n\t\tvj = j+steps[q][1]*2;\n\t\tif(!isValid(indexI,indexJ,MAX_ROW,MAX_COLUMN)) continue;\n        if(isValid(vi,vj,MAX_ROW,MAX_COLUMN) && visited[vi][vj]===false)\n        {\n            addToQueue(indexI,indexJ,board,visualQueue,src,dst);\n            visited[indexI][indexJ]=true;\n            addToQueue(vi,vj,board,visualQueue,src,dst);\n        } \n    }\n}\n\nfunction isValid(i,j,maxR,maxC){\n\treturn (i>=0 && i<maxR && j>=0 && j<maxC);\n}\nfunction addToQueue(i,j,board,visualQueue,src,dst)\n{\nif((i==src.i && j==src.j) || (i==dst.i && j==dst.j)) return;\nlet key=i+'-'+j;\nboard[key].state=OBSTRUCTION;\nvisualQueue.push(key);\n//board[key].className='cssClasses.obstruction';\n}\nfunction getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}\nfunction generateVisited(){\n    let visited,row;\n    visited=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(false);\n        }\n        visited.push(row);\n    }\n    return visited;    \n}\nfunction test(visited){\n    var x='';\n    for(var p=0;p<visited.length;p++)\n    {\n        for(var q=0;q<visited[p].length;q++) x+=visited[p][q]+' ';\n        x+='\\n';\n    }\n    document.getElementById('testingTextArea').value=document.getElementById('testingTextArea').value+'\\n\\n\\n'+x;\n}","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW } from './GRAPH_CONSTANTS';\nexport function randomObstructionMaze(board,src,dst)\n{\n    let strKey;\n    let currentCell,i,j,hashKey;\n    let queue=[];\n    let visualQueue=[];\n    // for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue);\n    // for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue);\n    // for(var x=MAX_ROW;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue);\n    // for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue);\n    for(var p=0;p<MAX_ROW;p++)\n    {\n        for(var q=0;q<MAX_COLUMN;q++)\n        {\n            strKey=p+'-'+q;\n            //if(src.key===strKey || dst.key===strKey) continue;\n            //board[strKey].state=OBSTRUCTION\n            //board[strKey].className='cssClasses.obstruction';\n            if(Math.floor(Math.random()*10)%4==0) addToQueue(p,q,board,visualQueue,src,dst);\n        }\n    }    \n    let result=[];\n    let grid=getGrid(board);\n    let r=[1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\n    let c=[0,1];\n    result=[board,visualQueue,grid];\n    return result;\n}\nfunction addToQueue(i,j,board,visualQueue,src,dst)\n{\nlet key=i+'-'+j;\nif(key==src.key || key==dst.key) return;\nboard[key].state=OBSTRUCTION;\nvisualQueue.push(key);\n//board[key].className='cssClasses.obstruction';\n}\n\nfunction getGrid(board)\n{\n    let grid,row;\n    grid=[];\n    for(var i=0;i<MAX_ROW;i++)\n    {\n        row=[]\n        for(var j=0;j<MAX_COLUMN;j++)\n        {\n            row.push(board[i+'-'+j]);\n        }\n        grid.push(row);\n    }\n    return grid;\n}","import React, {Component} from 'react';\nimport cssClasses from './Grid.module.css';\nimport { UNVISITED,MAX_COLUMN,MAX_ROW } from './GRID_CONSTANTS';\nimport { OBSTRUCTION } from '../algorithms/GRAPH_CONSTANTS';\nexport function createBoard()\n{\n    let board=[];\n    let cells={};\n    let row,x;\n    for(let i=0;i<MAX_ROW;i++)\n    {\n        row=[];\n        for(let j=0;j<MAX_COLUMN;j++)\n        {\n            x={\n                i:i,\n                j:j,\n               state: UNVISITED,\n               key: i+'-'+j,\n               //className: 'cssClasses.unvisited'\n            };\n            cells[x.key]=x;\n            row.push(x);\n        }\n        board.push(row);\n    }\n    return [board,cells];\n}\n\nexport function createWeightBoard(){\n    let weightBoard=[];\n    let row,x;\n    for(let i=0;i<MAX_ROW;i++)\n    {\n        row=[];\n        for(let j=0;j<MAX_COLUMN;j++)\n        {\n            x=Math.floor(Math.random()*10)%10;\n            row.push(x);\n        }\n        weightBoard.push(row);\n    }\n    return weightBoard;\n\n}\nexport function createEmptyWeightBoard(){\n    let weightBoard=[];\n    let row,x;\n    for(let i=0;i<MAX_ROW;i++)\n    {\n        row=[];\n        for(let j=0;j<MAX_COLUMN;j++)\n        {\n            x=1;\n            row.push(x);\n        }\n        weightBoard.push(row);\n    }\n    return weightBoard;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function createClearedBoard(leaveObstruction,prevBoard){\n    let board=[];\n    let cells={};\n    let row,x;\n    for(let i=0;i<MAX_ROW;i++)\n    {\n        row=[];\n        for(let j=0;j<MAX_COLUMN;j++)\n        {\n            x={\n                i:i,\n                j:j,\n               state: (leaveObstruction && prevBoard[i][j].state===OBSTRUCTION)?OBSTRUCTION:UNVISITED,\n               key: i+'-'+j,\n               //className: 'cssClasses.unvisited'\n            };\n            cells[x.key]=x;\n            row.push(x);\n        }\n        board.push(row);\n    }\n    return [board,cells];\n}","import React, {Component} from 'react';\nimport cssClasses from './Grid.module.css';\nimport NavigationBar from '../NavigationBar/NavigationBar';\nimport Toolbar from '../Toolbar/Toolbar';\nimport Legend from '../Legend/Legend';\nimport { UNVISITED,VISITED,PATH,VISITING,OBSTRUCTION,MAX_COLUMN,MAX_ROW,startX,startY,endX,endY,MAZE_SPEED,SEARCH_SPEED } from './GRID_CONSTANTS';\nimport { breadthFirstSearch } from '../algorithms/bfs';\nimport { depthFirstSearch } from '../algorithms/dfs';\nimport { dijkstraSearch } from '../algorithms/dijkstraSearch';\nimport { bestFirstSearch } from '../algorithms/bestFirstSearch';\nimport { bestFirstSearchWeighted } from '../algorithms/bestFirstSearchWeighted';\nimport { recursiveDivisonMaze } from '../algorithms/recursiveDivisionMaze';\nimport { recursiveMaze } from '../algorithms/recursiveMaze';\nimport { dfsMaze } from '../algorithms/dfsMaze';\nimport { randomObstructionMaze } from '../algorithms/randomObstructionMaze';\nimport { createBoard,createWeightBoard,createEmptyWeightBoard } from './Helper';\nexport default class Grid extends Component{\n    constructor(props){\n        super(props);\n        this.state={title: 'Dummy Algorithm',\n        currentAlgorithm:'',\n        disableAll:false,\n        currentAlgorithmKey:-1,\n        algorithms:['BFS','DFS','Swarm','Greedy BFS','A*','Dijkstra'],\n        algorithmFunctions:[this.bfs,this.dfs,this.swarm,this.greedyBFS,this.aStar,this.dijstra],\n        mazes:['Recursive Divison','DFS Maze','Random Connection','Random Obstruction'],\n        mazeFunctions:[this.getRecursiveDivisionMaze,this.getDFSMaze,this.getRecursiveMaze,this.getRandomObstructionMaze],\n        cellsLoaded:false,\n        weightsSet:false\n\n    };\n    }\n    componentDidMount(){\n        this.populateDS();\n    }\n    populateDS=()=>{\n        let result=createBoard();\n        let board,cells;\n        board=result[0];\n        cells=result[1];\n        // let src=board[startX][startY];\n        // let dst=board[endX][endY];\n        this.setState({\n            ...this.state,\n            grid:board,\n            cells:cells,\n            src:board[startY][startX],\n            dst:board[endY][endX]\n        },()=>{\n            this.setState({\n                ...this.state,\n                cellsLoaded:true,\n                cells:cells,\n                setters:{start:{x:this.state.src.i,y:this.state.src.j,settter:this.setSrc},end:{x:this.state.dst.i,y:this.state.dst.j,setter:this.setDst}}\n            });\n        });\n    }\n    tdClickHandler=(key)=>{\n        if(key===this.state.src.key || key===this.state.dst.key || this.state.disableAll==true) return;\n        let cellState=this.state.cells[key].state;\n        this.setState(prevState => {\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\n                state.cells[key].state=cellState!==OBSTRUCTION?OBSTRUCTION:UNVISITED;                   // update the name property, assign a new value                 \n                //state.cells[key].className=cssClasses.obstruction;\n            return {state};\n        });\n        if(cellState!==OBSTRUCTION) document.getElementById(key).className=cssClasses.obstruction;\n        else document.getElementById(key).className=cssClasses.unvisited;\n    }\n    setSrc=(i,j)=>{\n        let prevKey=this.state.src.key;\n        if(this.state.grid[i][j].state===OBSTRUCTION)\n        {\n            alert('Cannot place Start here as there is an obstruction, please remove the obstruction first by clicking on the obstructed cell and try again');\n            return;\n        }\n        this.setState({\n            ...this.state,\n            src:this.state.cells[i+'-'+j],\n        });\n        this.clearBoardHandler(true);\n    }\n    setDst=(i,j)=>{\n        let prevKey=this.state.dst.key;\n        if(this.state.grid[i][j].state===OBSTRUCTION)\n        {\n            alert('Cannot place End here as there is an obstruction, please remove the obstruction first by clicking on the obstructed cell and try again');\n            return;\n        }\n        this.setState({dst:this.state.cells[i+'-'+j]});\n        this.clearBoardHandler(true);\n    }\n    componentWillReceiveProps(nextProps) {\n        console.log('^^^^^^^^^%^^^^^^^^^^^^^^^^^^^^^^^^^');\n        this.setState({title: nextProps.title})\n      }\n\n    render()\n    {\n        return (\n            <div>\n                <NavigationBar />\n        <div className=\"card card-block\">\n\n            {/* <h4 className=\"card-title\"><b>title</b></h4>\n\n            <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\n            <Toolbar clear={this.clearBoardHandler} toggleWeights={this.toggleWeights} disableAll={this.state.disableAll} setStart={this.setSrc} setEnd={this.setDst} visualize={this.visualizeSelectedAlgorithmHandler} currentAlgorithm={this.state.currentAlgorithm} algorithms={this.state.algorithms} mazes={this.state.mazes} mazeHandler={this.selectMazeHandler} algorithmHandler={this.selectAlgorithmHandler} />\n            {/* <Legend /> */}\n\n            <div className=\"flex-row\">\n            <table align='center'>\n                <thead>\n                <tr>\n                </tr>\n                </thead>\n                <tbody>\n                    {this.state.cellsLoaded?this.state.grid.map((row,rIndex)=>{\n                        return (\n                            <tr key={rIndex}>\n                            {row.map((cell,cIndex)=>{\n                                return (\n                                <td id={cell.key} key={cell.key} className={cell.state===UNVISITED?cssClasses.unvisited:cell.state===VISITED?cssClasses.visited:cell.state===OBSTRUCTION?cssClasses.obstruction:cell.state==PATH?cssClasses.path:null } onMouseDownCapture={this.tdClickHandler.bind(this,cell.key)}  onDrag={this.tdClickHandler.bind(this,cell.key)}>\n                                    {this.state.src.key===cell.key?<i className=\"fas fa-female\"></i>:this.state.dst.key===cell.key?<i className=\"fa fa-flag\"  aria-hidden=\"true\"></i>:this.state.weightsSet?this.state.weightBoard[rIndex][cIndex]:null}\n                                    </td>\n                                )\n                            })}\n\n                        </tr>\n                        );\n                    }):<tr><td>Loading</td></tr>}\n                </tbody>\n            </table>\n            </div>\n        </div>   \n        </div>     \n        );\n    }\n\n    visualizeSelectedAlgorithmHandler=()=>{\n        if(this.state.currentAlgorithmKey==-1){\n            alert('please select an algorithm first');\n            return;\n        }\n        this.state.algorithmFunctions[this.state.currentAlgorithmKey]();\n    }\n    selectAlgorithmHandler=(key)=>{\n        //alert(key);\n        this.setState({\n            ...this.state,\n            currentAlgorithm:this.state.algorithms[key],\n            currentAlgorithmKey:key\n        });\n        \n    }\n    selectMazeHandler=(key)=>{\n        this.setState({\n            ...this.state,\n            currentMaze:this.state.mazes[key],\n            currentMazeKey:key\n        });\n        this.state.mazeFunctions[key]();\n    }\n    clearBoardHandler=(leaveObstruction)=>{\n        let key,grid,cells,row,x;\n        let board;\n        grid=[];\n        for(var i=0;i<MAX_ROW;i++)\n        {\n            row=[];\n            for(var j=0;j<MAX_COLUMN;j++)\n            {\n                document.getElementById(i+'-'+j).className=cssClasses.unvisited;\n                if(leaveObstruction)\n                {\n                    if(this.state.cells[i+'-'+j].state===OBSTRUCTION) \n                    {\n                        //console.log(i+'-'+j,'obstruction');\n                        this.setState(this.updateCellState(i+'-'+j,OBSTRUCTION,cssClasses.obstruction));\n                        document.getElementById(i+'-'+j).className=cssClasses.obstruction;\n                    }\n                    else \n                    {\n                        //console.log(i+'-'+j,'no-obstruction');\n                        this.setState(this.updateCellState(i+'-'+j,UNVISITED,cssClasses.unvisited));\n                    }\n                }\n                else this.setState(this.updateCellState(i+'-'+j,UNVISITED,cssClasses.unvisited));\n        \n            }\n        }\n        console.log(this.state);\n        }\n        updateCellState=(key,cellState,cssClass)=>{\n        return (prevState)=>{\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\n            state.cells[key].state=cellState;                   // update the name property, assign a new value                 \n            //state.cells[key].className=cssClass;\n            return {state};\n            }\n        }\n        \n    getRecursiveMaze=()=>\n    {\n        this.setState({disableAll:true});\n        let currentCell;\n        let newBoard=createBoard();\n        this.clearBoardHandler(false);\n        let board=newBoard[1];\n        let result=recursiveMaze(board,this.state.src,this.state.dst);\n        board=result[0];\n        let visualQueue=result[1];\n        let grid=result[2];\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0)\n            {\n               this.setState({\n                    ...this.state,\n                    cells:board,\n                    src:board[this.state.src.key],\n                    dst:board[this.state.dst.key],\n                    grid:grid,\n                    disableAll:false\n                },()=>{});\n                 \n                clearInterval(inter);\n            }\n            else{\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\n            }\n        },MAZE_SPEED);\n\n    }\n\n    getRandomObstructionMaze=()=>\n    {\n        this.setState({disableAll:true});\n        let currentCell;\n        let newBoard=createBoard();\n        this.clearBoardHandler(false);\n        let board=newBoard[1];\n        let result=randomObstructionMaze(board,this.state.src,this.state.dst);\n        board=result[0];\n        let visualQueue=result[1];\n        let grid=result[2];\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0)\n            {\n               this.setState({\n                    ...this.state,\n                    cells:board,\n                    src:board[this.state.src.key],\n                    dst:board[this.state.dst.key],\n                    grid:grid,\n                    disableAll:false\n                },()=>{});\n                 \n                clearInterval(inter);\n            }\n            else{\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\n            }\n        },MAZE_SPEED);\n\n    }\n\n    getRecursiveDivisionMaze=()=>\n    {\n        this.setState({disableAll:true});\n        let currentCell;\n        let newBoard=createBoard();\n        this.clearBoardHandler(false);\n        let board=newBoard[1];\n        let result=recursiveDivisonMaze(board,this.state.src,this.state.dst);\n        board=result[0];\n        let visualQueue=result[1];\n        let grid=result[2];\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0)\n            {\n               this.setState({\n                    ...this.state,\n                    cells:board,\n                    src:board[this.state.src.key],\n                    dst:board[this.state.dst.key],\n                    grid:grid,\n                    disableAll:false\n                },()=>{});\n                 \n                clearInterval(inter);\n            }\n            else{\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\n            }\n        },MAZE_SPEED);\n\n    }\n\n\n\n\n\n    getDFSMaze=()=>{\n        this.setState({disableAll:true});\n        let currentCell;\n        let newBoard=createBoard();\n        this.clearBoardHandler(false);\n        let board=newBoard[1];\n        let result=dfsMaze(board,this.state.src,this.state.dst);\n        board=result[0];\n        let visualQueue=result[1];\n        let grid=result[2];\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0)\n            {\n               this.setState({\n                    ...this.state,\n                    cells:board,\n                    src:board[this.state.src.key],\n                    dst:board[this.state.dst.key],\n                    grid:grid,\n                    disableAll:false\n                },()=>{});\n                 \n                clearInterval(inter);\n            }\n            else{\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\n            }\n        },MAZE_SPEED);\n    }\n    bfs=()=>{\n        this.setState({disableAll:true});\n        this.clearBoardHandler(true);\n        let board=JSON.parse(JSON.stringify(this.state.cells));\n        let src=board[this.state.src.key];\n        let dst=board[this.state.dst.key];\n        let currentCell,visualQueue,path,grid;\n        let result=breadthFirstSearch(src,board,dst);\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\n        path=JSON.parse(JSON.stringify(result[1]));\n        grid=JSON.parse(JSON.stringify(result[2]));\n        //let stateCells=visualQueue.concat(path);\n        let afterUpdate=()=>{\n        }\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0 && path.length===0) \n            {\n                this.setState({disableAll:false});\n                clearInterval(inter);\n            }\n            else if(visualQueue.length!==0)\n            {\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.visited;\n            }\n            else\n            {\n                currentCell=board[path.pop()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.path;\n            }\n        },SEARCH_SPEED);\n    }\n\n    dfs=()=>{\n        this.setState({disableAll:true});\n        this.clearBoardHandler(true);\n        let board=JSON.parse(JSON.stringify(this.state.cells));\n        let src=board[this.state.src.key];\n        let dst=board[this.state.dst.key];\n        let currentCell,visualQueue,path,grid;\n        let result=depthFirstSearch(src,board,dst);\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\n        path=JSON.parse(JSON.stringify(result[1]));\n        grid=JSON.parse(JSON.stringify(result[2]));\n        //let stateCells=visualQueue.concat(path);\n        let afterUpdate=()=>{\n        }\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0 && path.length===0) \n            {\n                this.setState({disableAll:false});\n                clearInterval(inter);\n            }\n            else if(visualQueue.length!==0)\n            {\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.visited;\n            }\n            else\n            {\n                currentCell=board[path.pop()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.path;\n            }\n        },SEARCH_SPEED);\n    }\n    toggleWeights=()=>{\n        if(!this.state.weightsSet){\n            let weightBoard=createWeightBoard();\n            this.setState({\n                weightsSet:true,\n                weightBoard:weightBoard\n            });\n        }\n        else{\n            this.setState({\n                weightsSet:false,\n                weightBoard:null\n            });\n        }  \n    }\n    createWeights=()=>{\n        let weightBoard=createWeightBoard();\n        this.setState({\n            weightsSet:true,\n            weightBoard:weightBoard\n        });\n    }\n    destroyWeights=()=>{\n        this.setState({\n            weightsSet:false,\n            weightBoard:null\n        });\n    }\n    dijstra=()=>{\n        this.setState({disableAll:true});\n        this.clearBoardHandler(true);\n        let board=JSON.parse(JSON.stringify(this.state.cells));\n        let src=board[this.state.src.key];\n        let dst=board[this.state.dst.key];\n        let weights;\n        let currentCell,visualQueue,path,grid;\n        \n        let result;\n        if(this.state.weightsSet) weights=this.state.weightBoard;            \n        else weights=createEmptyWeightBoard();\n        result=dijkstraSearch(src,board,dst,weights);        \n        visualQueue=JSON.parse(JSON.stringify(result[0]));\n        path=JSON.parse(JSON.stringify(result[1]));\n        grid=JSON.parse(JSON.stringify(result[2]));\n        //let stateCells=visualQueue.concat(path);\n        let afterUpdate=()=>{\n        }\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0 && path.length===0) \n            {\n                this.setState({disableAll:false});\n                clearInterval(inter);\n            }\n            else if(visualQueue.length!==0)\n            {\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.visited;\n            }\n            else\n            {\n                currentCell=board[path.pop()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.path;\n            }\n        },SEARCH_SPEED);\n    }\n    aStar=()=>{\n\n        this.setState({disableAll:true});\n        this.clearBoardHandler(true);\n        let board=JSON.parse(JSON.stringify(this.state.cells));\n        let src=board[this.state.src.key];\n        let dst=board[this.state.dst.key];\n        let currentCell,visualQueue,path,grid;\n        let heuristic,row;\n        let result;\n        heuristic=[];\n        for(var r=0;r<MAX_ROW;r++){\n            row=[];            //f(a)=g(a)+h(a)  //destination heuristics                    //source heuristics \n            for(var c=0;c<MAX_COLUMN;c++) row.push(Math.abs(r-dst.i)+Math.abs(c-dst.j)         +Math.abs(r-src.i)+Math.abs(c-src.j)/2        ); //manhatten distance\n            heuristic.push(row);\n        }\n        if(this.state.weightsSet)\n        {\n            let weights=this.state.weightBoard\n            result=bestFirstSearchWeighted(src,board,dst,heuristic,weights);\n        }\n        else result=bestFirstSearch(src,board,dst,heuristic);\n\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\n        path=JSON.parse(JSON.stringify(result[1]));\n        grid=JSON.parse(JSON.stringify(result[2]));\n        //let stateCells=visualQueue.concat(path);\n        let afterUpdate=()=>{\n        }\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0 && path.length===0) \n            {\n                this.setState({disableAll:false});\n                clearInterval(inter);\n            }\n            else if(visualQueue.length!==0)\n            {\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.visited;\n            }\n            else\n            {\n                currentCell=board[path.pop()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.path;\n            }\n        },SEARCH_SPEED);\n    }\n    greedyBFS=()=>{\n\n        this.setState({disableAll:true});\n        this.clearBoardHandler(true);\n        let board=JSON.parse(JSON.stringify(this.state.cells));\n        let src=board[this.state.src.key];\n        let dst=board[this.state.dst.key];\n        let currentCell,visualQueue,path,grid;\n        let result;\n        let heuristic,row;\n        heuristic=[];\n        for(var r=0;r<MAX_ROW;r++){\n            row=[];\n            for(var c=0;c<MAX_COLUMN;c++){ //f(a)=h(a)\n                row.push(Math.abs(r-dst.i)+Math.abs(c-dst.j)); //manhatten distance\n            }\n            heuristic.push(row);\n        }\n        if(this.state.weightsSet){\n            let weights=this.state.weightBoard\n            result=bestFirstSearchWeighted(src,board,dst,heuristic,weights);\n        }\n        else result=bestFirstSearch(src,board,dst,heuristic);\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\n        path=JSON.parse(JSON.stringify(result[1]));\n        grid=JSON.parse(JSON.stringify(result[2]));\n        //let stateCells=visualQueue.concat(path);\n        let afterUpdate=()=>{\n        }\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0 && path.length===0) \n            {\n                this.setState({disableAll:false});\n                clearInterval(inter);\n            }\n            else if(visualQueue.length!==0)\n            {\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.visited;\n            }\n            else\n            {\n                currentCell=board[path.pop()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.path;\n            }\n        },SEARCH_SPEED);\n\n    }\n\n    swarm=()=>{\n\n        this.setState({disableAll:true});\n        this.clearBoardHandler(true);\n        let board=JSON.parse(JSON.stringify(this.state.cells));\n        let src=board[this.state.src.key];\n        let dst=board[this.state.dst.key];\n        let currentCell,visualQueue,path,grid;\n        let heuristic,row;\n        let result;\n        heuristic=[];\n        for(var r=0;r<MAX_ROW;r++){\n            row=[];            //f(a)=g(a)+h(a)  //destination heuristics                    //source heuristics \n            for(var c=0;c<MAX_COLUMN;c++) row.push(Math.abs(r-dst.i)+Math.abs(c-dst.j)         +Math.abs(r-src.i)+Math.abs(c-src.j)/2        ); //manhatten distance\n            heuristic.push(row);\n        }\n        if(this.state.weightsSet)\n        {\n            let weights=this.state.weightBoard;\n            for(var r=0;r<MAX_ROW;r++){\n                //row=[];            //f(a)=g(a)+h(a)  //destination heuristics                    //source heuristics \n                for(var c=0;c<MAX_COLUMN;c++) heuristic[r][c]+=weights[r][c]; //manhatten distance\n                //heuristic.push(row);\n            }    \n            result=dijkstraSearch(src,board,dst,heuristic);\n        }\n        else result=dijkstraSearch(src,board,dst,heuristic);\n\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\n        path=JSON.parse(JSON.stringify(result[1]));\n        grid=JSON.parse(JSON.stringify(result[2]));\n        //let stateCells=visualQueue.concat(path);\n        let afterUpdate=()=>{\n        }\n        var inter=setInterval(()=>{\n            if(visualQueue.length===0 && path.length===0) \n            {\n                this.setState({disableAll:false});\n                clearInterval(inter);\n            }\n            else if(visualQueue.length!==0)\n            {\n                currentCell=board[visualQueue.shift()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.visited;\n            }\n            else\n            {\n                currentCell=board[path.pop()];\n                //this.setState(updateState,afterUpdate);\n                document.getElementById(currentCell.key).className=cssClasses.path;\n            }\n        },SEARCH_SPEED);\n    }\n\n\n\n\n\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\nimport { getGrid } from './Utility/utility';\nexport function depthFirstSearch(src,board,dst)\n{\n    console.log('src',src);\n    console.log('dst',dst);\n    console.log('board',board);\n    let currentCell,i,j,hashKey;\n    let stack=[];\n    let visualQueue=[];\n    let previous={};\n    let result=[];\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\n    let c=[0,-1,0,1];\n    console.log('src:',src);\n    console.log('dst:',dst);\n    console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n    stack.push(src);\n\n    while(stack.length!=0)\n    {\n        currentCell=stack.pop();\n        if(currentCell.state===VISITED) continue;\n        if(currentCell.key===dst.key)\n        {\n            visualQueue.push(currentCell.key);\n            currentCell.state=VISITED;\n            break;\n        }\n        currentCell.state=VISITED;\n        //currentCell.className=cssClasses.visited;\n        visualQueue.push(currentCell.key);\n        for(let a=0;a<r.length;a++) //or c.length\n        {\n            i=currentCell.i+r[a];\n            j=currentCell.j+c[a];\n            hashKey=i+'-'+j;\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\n            {\n                stack.push(board[hashKey]);\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\n            }\n        }\n    }\n    let node=dst.key;\n    let path=[];\n    while(1)\n    {\n        if(node)\n        {\n            path.push(node);\n            board[node].state=PATH;\n            node=previous[node];\n            console.log(node);\n            if(node===src.key)\n            {\n                path.push(node);\n                board[node].state=PATH;\n                break;\n            }\n        }\n        else break;\n    }\n    let grid=getGrid(board);\n    result=[visualQueue,path,grid];\n    console.log('path',path);\n    console.log('visualQueue',visualQueue);\n    return result;\n\n\n    \n\n\n\n\n}\n","import React, {Component} from 'react';\nimport Toolbar from './Toolbar/Toolbar'\nimport Grid from './Grid/Grid';\nexport default class Visualizer extends Component{\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            currentAlgorithm:'',\n            currentAlgrithmKey:-1,\n            algorithms:['Breadth-First-Search','Depth-First-Search','Dijkstra'],\n            mazes:['A','B','C']                \n        };\n    }\n    render()\n    {\n        return (\n            <div>\n                <Grid />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Visualizer from './Visualizer/Toolbar/Toolbar'\nimport Toolbar from './Visualizer/Visualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toolbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}